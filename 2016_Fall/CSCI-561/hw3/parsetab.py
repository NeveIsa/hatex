
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '8ABE428CEB9AC4CDFF89D0C273B1901D'
    
_lr_action_items = {'AND':([2,5,10,11,16,17,18,19,20,],[-5,12,12,-6,-7,-4,-1,12,12,]),'PREDICATE':([0,3,4,12,13,14,],[1,1,1,1,1,1,]),'RPAREN':([2,6,7,8,9,10,11,16,17,18,19,20,21,],[-5,16,-8,-11,-10,17,-6,-7,-4,-1,-3,-2,-9,]),'IMPLY':([2,5,10,11,16,17,18,19,20,],[-5,13,13,-6,-7,-4,-1,-3,-2,]),'PREDICATEVAR':([1,15,],[8,8,]),'COMMA':([6,7,8,9,21,],[15,-8,-11,-10,-9,]),'LPAREN':([0,3,4,12,13,14,],[3,3,3,3,3,3,]),'NOT':([0,3,4,12,13,14,],[4,4,4,4,4,4,]),'OR':([2,5,10,11,16,17,18,19,20,],[-5,14,14,-6,-7,-4,-1,14,-2,]),'PREDICATECONST':([1,15,],[9,9,]),'$end':([2,5,11,16,17,18,19,20,],[-5,0,-6,-7,-4,-1,-3,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'allterms':([1,],[6,]),'term':([1,15,],[7,21,]),'expression':([0,3,4,12,13,14,],[5,10,11,18,19,20,]),'atomic':([0,3,4,12,13,14,],[2,2,2,2,2,2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',85),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',86),
  ('expression -> expression IMPLY expression','expression',3,'p_expression_binop','parser.py',87),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',96),
  ('expression -> atomic','expression',1,'p_expression_atomic','parser.py',100),
  ('expression -> NOT expression','expression',2,'p_not_expression','parser.py',104),
  ('atomic -> PREDICATE allterms RPAREN','atomic',3,'p_atomic','parser.py',111),
  ('allterms -> term','allterms',1,'p_allterms_term','parser.py',116),
  ('allterms -> allterms COMMA term','allterms',3,'p_allterms_moreterm','parser.py',122),
  ('term -> PREDICATECONST','term',1,'p_term_constant','parser.py',128),
  ('term -> PREDICATEVAR','term',1,'p_term_variable','parser.py',132),
]
