
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '291C99356ECE2E93DF13040A996B2F72'
    
_lr_action_items = {'RPAREN':([4,6,10,14,15,16,17,18,19,20,21,22,23,25,26,],[-3,-2,20,-5,-11,-14,-15,25,-13,-4,-8,-7,-6,-10,-12,]),'&':([4,6,7,10,14,20,21,22,23,25,],[-3,-2,13,13,-5,-4,13,-7,-6,-10,]),'PREDICATEVAR':([9,24,],[16,16,]),',':([15,16,17,19,],[24,-14,-15,-13,]),'IMPLY':([4,6,7,10,14,20,21,22,23,25,],[-3,-2,11,11,-5,-4,-8,-7,-6,-10,]),'PREDICATENAME':([0,5,8,9,11,12,13,24,],[1,1,1,17,1,1,1,17,]),'LPAREN':([0,1,2,5,8,11,12,13,],[5,-9,9,5,5,5,5,5,]),'~':([0,5,8,11,12,13,],[8,8,8,8,8,8,]),'|':([4,6,7,10,14,20,21,22,23,25,],[-3,-2,12,12,-5,-4,12,-7,-6,-10,]),'$end':([3,4,6,7,14,20,21,22,23,25,],[0,-3,-2,-1,-5,-4,-8,-7,-6,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'predicate':([0,5,8,11,12,13,],[2,2,2,2,2,2,]),'terms':([9,24,],[18,26,]),'term':([9,24,],[15,15,]),'compoundexpression':([0,5,8,11,12,13,],[4,4,4,4,4,4,]),'statement':([0,],[3,]),'simpleexpression':([0,5,8,11,12,13,],[6,6,6,6,6,6,]),'constant':([9,24,],[19,19,]),'expression':([0,5,8,11,12,13,],[7,10,14,21,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','parser.py',27),
  ('expression -> simpleexpression','expression',1,'p_expression','parser.py',31),
  ('expression -> compoundexpression','expression',1,'p_expression','parser.py',32),
  ('compoundexpression -> LPAREN expression RPAREN','compoundexpression',3,'p_compoundexpression_group','parser.py',37),
  ('compoundexpression -> ~ expression','compoundexpression',2,'p_compoundexpression_not','parser.py',42),
  ('compoundexpression -> expression & expression','compoundexpression',3,'p_compoundexpression_and','parser.py',48),
  ('compoundexpression -> expression | expression','compoundexpression',3,'p_compoundexpression_or','parser.py',56),
  ('compoundexpression -> expression IMPLY expression','compoundexpression',3,'p_compoundexpression_imply','parser.py',64),
  ('predicate -> PREDICATENAME','predicate',1,'p_predicate','parser.py',72),
  ('simpleexpression -> predicate LPAREN terms RPAREN','simpleexpression',4,'p_simpleexpression','parser.py',76),
  ('terms -> term','terms',1,'p_terms','parser.py',82),
  ('terms -> term , terms','terms',3,'p_terms','parser.py',83),
  ('term -> constant','term',1,'p_term','parser.py',90),
  ('term -> PREDICATEVAR','term',1,'p_term','parser.py',91),
  ('constant -> PREDICATENAME','constant',1,'p_constant','parser.py',96),
]
